@model MyCRM.ViewModels.WorkOrderCreateViewModel

@{
    ViewData["Title"] = "Create Work Order";
}

<h1>Create Work Order</h1>

<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5>Work Order Details</h5>
            </div>
            <div class="card-body">
                <form asp-action="Create">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    
                    <div class="mb-3">
                        <label asp-for="ProductId" class="form-label">Product</label>
                        <select asp-for="ProductId" asp-items="Model.Products" class="form-select" required>
                            <option value="">Select Product</option>
                        </select>
                        <span asp-validation-for="ProductId" class="text-danger"></span>
                    </div>
                    
                    <div class="mb-3">
                        <label asp-for="Quantity" class="form-label">Quantity</label>
                        <input asp-for="Quantity" class="form-control" type="number" min="1" required />
                        <span asp-validation-for="Quantity" class="text-danger"></span>
                    </div>
                    
                    <div class="mb-3">
                        <label asp-for="StartDate" class="form-label">Start Date</label>
                        <input asp-for="StartDate" class="form-control" type="date" required />
                        <span asp-validation-for="StartDate" class="text-danger"></span>
                    </div>
                    
                    <div class="mb-3">
                        <label asp-for="ProductionLineId" class="form-label">Production Line (Optional)</label>
                        <select asp-for="ProductionLineId" asp-items="Model.ProductionLines" class="form-select">
                            <option value="">Select Production Line</option>
                        </select>
                        <span asp-validation-for="ProductionLineId" class="text-danger"></span>
                        <div class="form-text">If not selected, the order will be created without assigning to a line.</div>
                    </div>
                    
                    <div class="mb-3 form-check">
                        <input asp-for="DeductMaterials" class="form-check-input" type="checkbox" />
                        <label asp-for="DeductMaterials" class="form-check-label">Deduct materials from inventory</label>
                    </div>
                    
                    <div class="d-flex justify-content-between">
                        <a asp-action="Index" class="btn btn-secondary">Back to List</a>
                        <button type="submit" class="btn btn-primary">Create</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5>Production Time Calculation</h5>
            </div>
            <div class="card-body">
                <div id="calculationResult" class="d-none">
                    <dl class="row">
                        <dt class="col-sm-6">Base Production Time</dt>
                        <dd class="col-sm-6"><span id="baseTime">-</span> min/unit</dd>
                        
                        <dt class="col-sm-6">Quantity</dt>
                        <dd class="col-sm-6"><span id="quantity">-</span> units</dd>
                        
                        <dt class="col-sm-6">Efficiency Factor</dt>
                        <dd class="col-sm-6"><span id="efficiency">1.0</span></dd>
                        
                        <dt class="col-sm-6">Total Production Time</dt>
                        <dd class="col-sm-6"><span id="totalTime">-</span></dd>
                        
                        <dt class="col-sm-6">Estimated End Date</dt>
                        <dd class="col-sm-6"><span id="endDate">-</span></dd>
                    </dl>
                    
                    <div id="materialsStatus" class="mt-3">
                        <h6>Materials Status</h6>
                        <div id="materialsAvailable" class="alert alert-success d-none">
                            All required materials are available.
                        </div>
                        <div id="materialsUnavailable" class="alert alert-danger d-none">
                            Insufficient materials available for this order.
                        </div>
                        <div id="materialsList"></div>
                    </div>
                </div>
                
                <div id="calculationPlaceholder">
                    <p class="text-muted">Select a product and quantity to see production time calculation.</p>
                </div>
                
                <button type="button" id="calculateBtn" class="btn btn-outline-primary mt-3">Calculate Production Time</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const calculateBtn = document.getElementById('calculateBtn');
            const productSelect = document.getElementById('ProductId');
            const quantityInput = document.getElementById('Quantity');
            const lineSelect = document.getElementById('ProductionLineId');
            
            calculateBtn.addEventListener('click', function() {
                const productId = productSelect.value;
                const quantity = quantityInput.value;
                
                if (!productId || !quantity || quantity < 1) {
                    alert('Please select a product and enter a valid quantity.');
                    return;
                }
                
                // Get efficiency factor from selected production line
                let efficiencyFactor = 1.0;
                if (lineSelect.value) {
                    const selectedOption = lineSelect.options[lineSelect.selectedIndex];
                    // This would require adding data attributes to the options in the controller
                    // efficiencyFactor = parseFloat(selectedOption.getAttribute('data-efficiency') || '1.0');
                }
                
                // Call the calculation API
                fetch(`/api/calculate/production`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        product_id: parseInt(productId),
                        quantity: parseInt(quantity),
                        efficiency_factor: efficiencyFactor
                    })
                })
                .then(response => response.json())
                .then(data => {
                    document.getElementById('calculationPlaceholder').classList.add('d-none');
                    document.getElementById('calculationResult').classList.remove('d-none');
                    
                    // Update calculation results
                    document.getElementById('baseTime').textContent = '-'; // Would need to fetch from product
                    document.getElementById('quantity').textContent = quantity;
                    document.getElementById('efficiency').textContent = efficiencyFactor.toFixed(1);
                    
                    const hours = Math.floor(data.production_time_minutes / 60);
                    const minutes = Math.round(data.production_time_minutes % 60);
                    document.getElementById('totalTime').textContent = `${hours} h ${minutes} min`;
                    
                    const endDate = new Date(data.estimated_end_date);
                    document.getElementById('endDate').textContent = endDate.toLocaleString();
                    
                    // Update materials status
                    if (data.materials_available) {
                        document.getElementById('materialsAvailable').classList.remove('d-none');
                        document.getElementById('materialsUnavailable').classList.add('d-none');
                    } else {
                        document.getElementById('materialsAvailable').classList.add('d-none');
                        document.getElementById('materialsUnavailable').classList.remove('d-none');
                    }
                    
                    // This would require the API to return material details
                    // const materialsList = document.getElementById('materialsList');
                    // materialsList.innerHTML = '';
                    // if (data.required_materials && data.required_materials.length > 0) {
                    //     const table = document.createElement('table');
                    //     table.className = 'table table-sm';
                    //     table.innerHTML = `
                    //         <thead>
                    //             <tr>
                    //                 <th>Material</th>
                    //                 <th>Required</th>
                    //                 <th>Available</th>
                    //                 <th>Status</th>
                    //             </tr>
                    //         </thead>
                    //         <tbody id="materialsTableBody"></tbody>
                    //     `;
                    //     materialsList.appendChild(table);
                    //     
                    //     const tbody = document.getElementById('materialsTableBody');
                    //     data.required_materials.forEach(material => {
                    //         const tr = document.createElement('tr');
                    //         tr.innerHTML = `
                    //             <td>${material.name}</td>
                    //             <td>${material.required_quantity} ${material.unit}</td>
                    //             <td>${material.available_quantity} ${material.unit}</td>
                    //             <td>
                    //                 ${material.is_available 
                    //                     ? '<span class="badge bg-success">Available</span>' 
                    //                     : '<span class="badge bg-danger">Insufficient</span>'}
                    //             </td>
                    //         `;
                    //         tbody.appendChild(tr);
                    //     });
                    // }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Failed to calculate production time. Please try again.');
                });
            });
        });
    </script>
}
